// exponentially distributed arrivals
// uniformly distributed file size
// fixed probability for file to be in archive
// nondeterministic time for archive retrieval

const int C = 5; // queue size
const real TIME_BOUND;

const real LAMBDA = 1 / 8;     // request arrival rate
const real ARCH_PROB = 1 / 50; // fraction of files in archive
const real FILE_MIN = 1;       // min. time to send regular file
const real FILE_MAX = 3;       // max. time to send regular file
const real ARCH_MIN = 30;      // min. time to send archived file
const real ARCH_MAX = 40;      // max. time to send archived file

int(0..C) queue;

property QueueOverflowProbMax = Pmax(<> (queue == C && time <= TIME_BOUND));
property QueueOverflowProbMin = Pmin(<> (queue == C && time <= TIME_BOUND));
property QueueOverflowTimeMin = Xmin(time | queue == C);
property QueueOverflowTimeMax = Xmax(time | queue == C);

process Arrivals()
{
	clock c; real x;
	do {
		when urgent(c >= x && queue < C) {= queue++, c = 0, x = Exp(LAMBDA) =}
	}
}

process Server()
{
	clock c; real x;
	when urgent(queue > 0) palt {
	:  ARCH_PROB: {= queue--, c = 0 =};
		when(c >= ARCH_MIN) urgent(c >= ARCH_MAX) {= c = 0, x = Uni(FILE_MIN, FILE_MAX) =}
	:1-ARCH_PROB: {= queue--, c = 0, x = Uni(FILE_MIN, FILE_MAX) =}
	};
	when urgent(c >= x) tau {= c = 0, x = 0 =};
	Server()
}

par {
::	Arrivals()
::	Server()
::	urgent {= queue = DiscreteUniform(0, floor(C/2)) =}
}