// Modest PTA model of the bounded retransmission protocol (BRP)
// [HH09], http://www.modestchecker.net/CaseStudies/BRP/
action put, get, put_k, get_k, put_l, get_l;
action new_file;
action s_ok, s_dk, s_nok, s_restart;
action r_ok, r_inc, r_fst, r_nok, r_timeout;
exception error;

const int N; // number of frames per file
const int MAX; // maximum number of retransmissions per frame
const int TD; // transmission delay
const int TS = 2 * TD + 1; // sender timeout
const int TR = 2 * MAX * TS + 3 * TD; // receiver timeout
const int SYNC = TR;
const int TIME_BOUND = 64;

bool ff, lf, ab; // channel data: first/last frame, alternating bit
int(0..N) i; // sender chunk counter
bool inTransitK = false;
bool inTransitL = false;

bool first_file_done = false;
bool get_k_seen, s_ok_seen, s_nok_seen, s_dk_seen, s_restart_seen, r_ok_seen, r_timeout_seen;

// Invariant (timed) properties (from [BrpOnTime], the TA model)
bool premature_timeout, channel_k_overflow, channel_l_overflow;
// "there is at most one message in transit for each channel"
property T_1 = A[] (!(channel_k_overflow || channel_l_overflow));
// "there is at most one message in transit in total"
property T_2 = A[] (!(inTransitK && inTransitL));
// Assumption (A1): "no premature timeouts"
property T_A1 = A[] (!premature_timeout);
// Assumption (A2): "sender starts new file only after receiver reacted to failure"
// Note that receiver can only notice failure if it received at least one chunk, i.e. did(get_k)
property T_A2 = A[] (!s_restart_seen || !get_k_seen || r_timeout_seen);

// Probabilistic reachability properties (from [D'AJJL01], the RAPTURE/PRISM model)
// property A of [D'AJJL01]: "the maximum probability that eventually the sender reports 
// a certain unsuccessful transmission but the receiver got the complete file"
property P_A = Pmax(<> (s_nok_seen && r_ok_seen));
// property B of [D'AJJL01]: "the maximum probability that eventually the sender reports
// a certain successful transmission but the receiver did not get the complete file"
property P_B = Pmax(<> (s_ok_seen && !r_ok_seen));
// property 1 of [D'AJJL01]: "the maximum probability that eventually the sender
// does not report a successful transmission"
property P_1 = Pmax(<> (s_nok_seen || s_dk_seen));
// property 2 of [D'AJJL01]: "the maximum probability that eventually the sender
// reports an uncertainty on the success of the transmission"
property P_2 = Pmax(<> s_dk_seen);
// property 3 of [D'AJJL01]: "the maximum probability that eventually the sender
// reports an unsuccessful transmission after more than 8 chunks have been sent successfully"
property P_3 = Pmax(<> (s_nok_seen && i > 8));
// property 4 of [D'AJJL01]: "the maximum probability that eventually the receiver
// does not receive any chunk and the sender tried to send a chunk"
property P_4 = Pmax(<> ((s_ok_seen || s_nok_seen || s_dk_seen) && !get_k_seen));

// Probabilistic time-bounded reachability properties
// "the maximum/minimum probability that the sender reports
// a successful transmission within TIME_BOUND time units"
property Dmax = Pmax(<> (s_ok_seen && time <= TIME_BOUND));
property Dmin = Pmin(<> (s_ok_seen && time <= TIME_BOUND));

// Expected reachability properties
// "the maximum/minimum expected time until the transfer
// of the first file is finished (successfully or unsuccessfully)"
property Emax = Xmax(time | first_file_done);
property Emin = Xmin(time | first_file_done);


process Sender()
{
	exception timeout;
	bool bit;
	clock c;

	process LinkLayerSendData()
	{
		urgent put_k {= ff = (i == 1), lf = (i == N), ab = bit =}
	}

	process LinkLayerReceiveAck()
	{
		get_l
	}

	process WaitAck()
	{
		clock c;
		invariant(c <= TS) alt {
		::	LinkLayerReceiveAck(); urgent break
		::	when(c >= TS) throw(timeout)
		}
	}

	process SendChunk()
	{
		int(0..MAX) rc;

		do {
		::	try
			{
				par {
				::	LinkLayerSendData()
				::	WaitAck()
				}
			}
			catch timeout
			{
				urgent if(rc < MAX) { {= rc++ =} } // retry
				else { throw(error) } // no retries left
			}
		}
	}

	try
	{
		do {
		::	when(i < N) urgent {= i++ =};
			SendChunk();
			urgent {= bit = !bit =}
		::	when(i == N)
			// file transmission successfully completed
			urgent s_ok {= first_file_done = true =}; urgent break
		}
	}
	catch error
	{
		urgent if(i < N) { s_nok {= c = 0 =} }
		else { s_dk {= c = 0 =} };
		// file transmission not successful
		invariant(c <= SYNC) when(c >= SYNC)
		s_restart {= c = 0, bit = false, first_file_done = true =}
	}
}

process Receiver()
{
	exception timeout;
	bool r_ff, r_lf, r_ab;
	bool bit;
	clock c;

	process LinkLayerReceiveData()
	{
		get_k {= c = 0, bit = ab, r_ff = ff, r_lf = lf, r_ab = ab =}
	}

	process LinkLayerSendAck()
	{
		invariant(c <= 0) put_l
	}

	process WaitData()
	{
		invariant(c <= TR) alt {
		::	LinkLayerReceiveData()
		::	when(c >= TR) throw(timeout)
		}
	}

	// receive the first frame of a file
	LinkLayerReceiveData();
	urgent if(ff) { tau }
	else { {= premature_timeout = true =}; stop };

	// receive the rest of the file
	do
	{
		// report frame to upper layer
		urgent if(r_ab != bit) { tau } // repetition
		else if(r_lf)   { r_ok  {= bit = !bit =} }
		else if (r_ff)  { r_fst {= bit = !bit =} }
		else            { r_inc {= bit = !bit =} };

		// acknowledge
		LinkLayerSendAck();

		// wait for next frame
		try
		{
			WaitData()
		}
		catch timeout
		{
			urgent r_timeout;
			urgent if(r_lf) { break } // we just got the last frame
			else { r_nok; urgent break } // abort transfer
		}
	};
	Receiver()
}

process ChannelK()
{
	clock c;

	put_k palt
	{
		:98:	{= c = 0, inTransitK = true =};
				invariant(c <= TD)
				alt {
				::	get_k {= inTransitK = false =}
				::	put_k {= channel_k_overflow = true =}; stop
				}
		: 2:	{==}
	};
	ChannelK()
}

process ChannelL()
{
	clock c;

	put_l palt
	{
		:99:	{= c = 0, inTransitL = true =};
				invariant(c <= TD)
				alt {
				::	get_l {= inTransitL = false =}
				::	put_l {= channel_l_overflow = true =}; stop
				}
		: 1:	{==}
	};
	ChannelL()
}

process Observer()
{
	alt {
	::	get_k     {= get_k_seen     = true =}
	::	s_ok      {= s_ok_seen      = true =}
	::	s_nok     {= s_nok_seen     = true =}
	::	s_dk      {= s_dk_seen      = true =}
	::	s_restart {= s_restart_seen = true =}
	::	r_ok      {= r_ok_seen      = true =}
	::	r_timeout {= r_timeout_seen = true =}
	};
	Observer()
}

par {
::	Sender()
::	Receiver()
::	ChannelK()
::	ChannelL()
::	Observer()
}
