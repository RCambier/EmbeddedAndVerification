// Modest PTA model for the IEEE 802.3 CSMA/CD protocol
// modified to work with the confluence resolver
// [HT13], http://www.modestchecker.net/CaseStudies/CSMACD/
action send, send1, send2;
action end, end1, end2;
action busy, busy1, busy2;
action cd;
action backoff;

const int RED = 2; // reduction factor
const int PD = (int)(26 / RED); // signal propagation delay
const int TD = (int)(808 / RED); // packet transmission delay
const int ST = 2 * PD; // backoff time slot length
const int BCMAX = 1; // 1 or 2

bool end1_seen, end2_seen;

// Probabilistic reachability property:
// "with probability 1, eventually both stations send their packet correctly"
property P_1 = Pmax(<> (end1_seen && end2_seen));


process Medium()
{
	clock c;

	alt { :: send1 {= c = 0 =} :: send2 {= c = 0 =} };
	do {
	::	alt { :: end1 :: end2 }; // transfer finished
		urgent break
	::	when(c <= PD)
		alt { :: send1 {= c = 0 =} :: send2 {= c = 0 =} }; // collision
		invariant(c <= PD) cd; // collision detection
		urgent break
	::	when(c >= PD)
		alt { :: busy1 :: busy2 } // carrier is sensed busy
	};
	Medium()
}

process Station()
{
	clock c;
	int(0..BCMAX) bc;
	int(0..(int)pow(2, BCMAX + 1) - 1) backoff;

	urgent send {= c=0 =};
	do {
	::	invariant(c <= TD) alt {
		::	when(c >= TD) end; do { backoff }
		::	urgent cd {= c = 0, bc = min(bc + 1, BCMAX) =};
			do {
			::	urgent backoff {= backoff = DiscreteUniform(0, (int)pow(2, bc + 1) - 1) =};
				invariant(c <= backoff * ST) when(c >= backoff * ST) alt {
				::	send {= c = 0 =}; urgent break
				::	busy {= c = 0, bc = min(bc + 1, BCMAX) =}
				}
			}
		}
	}
}

process Observer()
{
	alt {
	::	end1 {= end1_seen = true =}
	::	end2 {= end2_seen = true =}
	};
	Observer()
}

par {
::	Medium()
::	relabel { send, end, busy } by { send1, end1, busy1 } Station()
::	relabel { send, end, busy } by { send2, end2, busy2 } Station()
::	Observer()
}